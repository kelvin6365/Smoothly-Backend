"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime
    @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")

"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query @group(middleware: ["auth:api"]) {
    users: [User!]! @paginate(type: "paginator", model: "App\\User")
    user(id: ID @eq): User @find(model: "App\\User")
    allTeams: [Team!]! @paginate(type: "paginator", model: "App\\Team")
    allJobboards: [Jobboard!]!
        @paginate(type: "paginator", model: "App\\Jobboard")
    UserPermission(user_id: ID @eq): UserPermission
        @find(model: "App\\UserPermission")
    team(id: ID @eq): Team @find(model: "App\\Team")
    sprint(id: ID @eq): Sprint @find(model: "App\\Sprint")
    jobboard(jobboard_id: ID! @eq, team_id: ID! @eq): TeamJobboard
        @find(model: "App\\TeamJobboard")
}

type Mutation {
    createUser(createUserInput: CreateUserInput! @spread): User
        @create(model: "App\\User")
    createTeam(createTeamInput: CreateTeamInput! @spread): Team
        @create(model: "App\\Team")
}

type User {
    id: ID! @globalId
    name: String!
    username: String!
    user_type: String!
    UserPermissions: [UserPermission!]! @hasMany(relation: "UserPermission")
    email: String!
    userDetail: UserDetail @hasOne
    created_at: DateTime!
    updated_at: DateTime!
}

type Team {
    id: ID! @globalId
    name: String!
    in_charge_user_id: ID!
    in_charge_user: User @hasOne
    TeamUsers: [TeamUser!]! @hasMany
    TeamJobboards: [TeamJobboard!]! @hasMany
}

type TeamUser {
    id: ID! @globalId
    user_id: ID!
    User: User @hasOne
    team_id: ID!
    Team: Team @hasOne
}

type TeamJobboard {
    id: ID! @globalId
    jobboard_id: ID!
    belongsToJobboard: Jobboard @hasOne
    team_id: ID!
}

type UserDetail {
    id: ID! @globalId
    user_id: ID!
    team_id: ID!
    belongsToTeam: Team @hasOne
    job_title: String!
    location: String!
}

type Permission {
    id: ID!
    permission_type: String!
}

type UserPermission {
    id: ID! @globalId
    permission_id: ID!
    jobboard_id: ID!
    user_id: ID!
    user: User @hasOne
    permission: Permission @hasOne
    jobboard: Jobboard @hasOne
    created_at: DateTime!
}

type Jobboard {
    id: ID! @globalId
    name: String!
    description: String!
    teams: [TeamJobboard!]! @hasMany
    active: String!
    sprints: [Sprint!]! @hasMany
    releasePlan: [ReleasePlan!] @hasMany
}

type SprintType {
    id: ID! @globalId
    DisplayOrder: String!
    name: String!
}

type Sprint {
    id: ID! @globalId
    jobboard: Jobboard @hasOne
    name: String!
    sprintType: SprintType! @hasOne
    start_date: DateTime
    end_date: DateTime
    tasks: [Task!]! @hasMany
}

type backupSprint {
    id: ID! @globalId
    jobboard: Jobboard @hasOne
    name: String!
    sprintType: SprintType! @hasOne
    start_date: DateTime
    end_date: DateTime
    tasks: [Task!]! @hasMany(relation: "Task", type: "paginator")
}

type Task {
    id: ID! @globalId
    name: String!
    description: String!
    hold_by: ID!
    taskHoldByUserInfo: User! @hasOne
    handle_by: ID!
    taskHandleByUserInfo: User! @hasOne
    startDate: DateTime
    endDate: DateTime
    taskType: TaskType! @hasOne
    taskState: TaskState! @hasOne
    taskTag: TaskTag! @hasOne
    taskOrderType: TaskOrderType! @hasOne
    belongsToSprint: Sprint! @hasOne
    comments: [Comment!]! @hasMany
    files: [File!]! @hasMany
    releaseplantask: ReleasePlanTask @hasOne
}

type TaskType {
    id: ID! @globalId
    name: String!
}

type TaskState {
    id: ID! @globalId
    DisplayOrder: String!
    name: String!
}

type TaskTag {
    id: ID! @globalId
    name: String!
}

type TaskOrderType {
    id: ID! @globalId
    name: String!
}

type File {
    id: ID! @globalId
    task: Task! @hasOne
    name: String!
    type: String!
    comment: Comment! @hasOne
}

type Comment {
    id: ID!
    text: String!
    user: User! @hasOne
    task: Task! @hasOne
}

type ReleasePlan {
    id: ID! @globalId
    name: String!
    description: String!
    release_date: DateTime
    tag: String!
    startDate: DateTime!
    endDate: DateTime!
    jobboard: Jobboard! @hasOne
}

type ReleasePlanTask {
    task: Task @hasOne
    task_id: String!
    release_plan_id: String!
    releaseplan: ReleasePlan @hasOne
}

input CreateUserInput {
    name: String @rules(apply: ["required"])
    username: String @rules(apply: ["required", "unique:users,username"])
    user_type: String @rules(apply: ["required"])
    password: String @bcrypt @rules(apply: ["required"])
    email: String @rules(apply: ["required", "email", "unique:users,email"])
}

input CreateTeamInput {
    name: String @rules(apply: ["required"])
    in_charge_user_id: ID @rules(apply: ["required"])
}
